# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

#  Trigger conditions, build steps, and deployment configurations

name: Dart

on:
  push:
    branches:
      - main
#  pull_request:
#    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
#       - uses: dart-lang/setup-dart@v2.19.1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603
      
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.1'  # 根据你的需求设置所需的Flutter版本

      - name: Install dependencies
        run: flutter pub get
        
        
      - name: echo something
        run: echo 'hello world'        
        
        

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: flutter test
#       - name: Run bash tests       
#         run: |
#           chmod +x ./scripts/build_profile.bash
#           ./scripts/build_profile.bash


      - name: Activate junitreport
        run: flutter pub global activate junitreport

      - name: Add flutter pub-cache to PATH
        run: export PATH="$PATH:$HOME/.pub-cache/bin"

      - name: Create test-reports directory
        run: mkdir ./test-reports

      - name: Refresh packages
        run: source ./scripts/refresh_packages.bash

      - name: Run build_runner
        run: |
          chmod +x ./scripts/build_runner.bash
          ./scripts/build_runner.bash

#       - name: Run unit tests and generate JUnit report
#         run: |
#           flutter test --machine > test-results.json
#           flutter pub global activate junitreport
#           flutter pub global run junitreport:tojunit test-results.json ./test-reports/unit_test.xml
          
#       - name: Run unit tests and generate JUnit report
#         run: flutter test --machine | flutter pub global run junitreport:tojunit | tee ./test-reports/unit_test.xml      
  
  

  
      - name: Run unit tests and generate JUnit report
#         run: |
#           flutter test --machine > test-results.json
#           flutter pub global activate junitreport
#           flutter pub global run junitreport:tojunit test-results.json > tmp.xml
#           cat tmp.xml > ./test-reports/unit_test.xml
#           rm tmp.xml
        run: |          
          flutter test --machine | tojunit -o   report.xml
          echo "Report file path: $PWD/report.xml"
          ls $PWD
          echo "Copying report file: $PWD/report.xml to C:\Users\61415\20230510\report.xml"
          scp $PWD/report.xml  C:\Users\61415\20230510\report.xml
  
      - name: Copy  junitreport  again
        run: cp $PWD/report.xml  C:\Users\61415\20230510\report.xml
  
#       - name: Copy report to Local
#         run: cp report.xml "C:\Users\61415\20230510\report.xml"
        
        
#       - name: Run widget tests and generate JUnit report
#         run:  flutter test test/widget/ --update-goldens --machine | flutter pub global run junitreport:tojunit > ./test-reports/widget_test.xml


